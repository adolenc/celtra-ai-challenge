(in-package :celtra)


(defun traces->heatmap (traces &optional (window #'kronecker-delta-window))
  (declare (optimize (speed 3) (safety 0)))
  (let ((heatmap (make-array (list (1+ (* 60 (/ 1 *interp-time-resolution*)))
                                   (* 360 (/ 1 *interp-angle-resolution*)))
                             :element-type 'double-float)))
    (declare (type (simple-array double-float (6001 360)) heatmap))
    (dolist (trace traces)
      (doseq (pt (interpolated-data trace))
        (when (valid-angle-p (t-angle pt))
          (let ((time (round (* (t-time pt) (/ 1 *interp-time-resolution*)))))
            (do-viewing-angles (theta (t-angle pt) *interp-angle-resolution*)
              (incf (aref heatmap time (ang-to-idx theta)) (funcall window (ang- (t-angle pt) theta))))))))
    heatmap))

(defun draw-heatmap (filename heatmap &optional paths)
  (declare (optimize (speed 3) (safety 0)))
  (destructuring-bind (n-times n-angles) (array-dimensions heatmap)
    (let ((img (make-8-bit-rgb-image n-times n-angles)))
      (declare (type 8-bit-rgb-image img))
      (fill-image img 0 0 0)
      (let ((max-value (loop for i below (* n-times n-angles) maximizing (row-major-aref heatmap i))))
        (dotimes (time n-times)
          (dotimes (theta n-angles)
            (let (
                  ;(plot-theta (mod (+ theta (/ n-angles 2)) n-angles))
                  (plot-theta theta)
                  )
              (setf (pixel img (- n-times time 1) plot-theta) (values (round (/ (aref heatmap time theta) max-value))
                                                                      (round (/ (aref heatmap time theta) max-value))
                                                                      0))))))
      (when paths
        (dolist (path paths)
          (let ((path-start (t-time (first path))))
            (dotimes (i (1- (length path)))
              (let ((current-time (- n-times i 1 (floor (/ path-start *interp-time-resolution*)))))
                (if (> (abs (- (t-angle (nth i path)) (t-angle (nth (1+ i) path)))) 180)
                  (setf (pixel img current-time (ang-to-idx (t-angle (nth i path)))) (values 100 100 100))
                  (draw-line img
                             current-time (ang-to-idx (t-angle (nth i path)))
                             (1- current-time) (ang-to-idx (t-angle (nth (1+ i) path)))
                             100 100 100)))))))
      (write-png-file filename img))))
